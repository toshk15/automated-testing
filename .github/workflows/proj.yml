name: Build, Test and Deploy

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code from the repository
    - name: Checkout repo
      uses: actions/checkout@v4

    # Set up Python environment
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    # Install dependencies
    - name: Install Dependecies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Build (this project deosn't require a build but we will simulate a build by creating a file)
    - name: Build Project
      run: |
        #mkdir -p build
        # Simulate build output by creating a file
        #touch build/output_file.txt
        mkdir -p test-results coverage-repository
        pytest --junitxml=test-results/results.xml --cov=app --cov-report=html:coverage-report

    # Run tests using pytest
    #- name: Run tests
    #  run: 
    #    pytest

    # Upload the build output as an artifact (we created a file in the build step to simulate an artifact)
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: junit-test-results
        path: test-results/results.xml
        #name: build-artifact
        #path: build/

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html
        path: coverage-report

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()

    steps:

    # Download the artifact from the build stage
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: Download coverage report
        path: test-results/

    - name: Simulate Deployment
      run: |
        echo "Deploying to staging..."
        ls btest-results/
